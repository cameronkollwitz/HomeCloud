# Traefik v2.2.x Service Stack

version: "3.7"

########################### NETWORKS
networks:
  # Stack-Only Networking
  internal:
    driver: overlay
    ipam:
      config:
        - subnet: XXX.XXX.XXX.0/24 # Define the subnet of the service stack!
  # External Networking
  # All front-facing external services attach to this network!
  traefik_public:
    external: true

########################### SECRETS
secrets:
  # Traefik
  CLOUDFLARE_API_EMAIL:
    external: true
  CLOUDFLARE_API_KEY:
    external: true
  # Authelia
  #AUTHELIA_DUO_API_SECRET_KEY_FILE:
  #  external: true
  AUTHELIA_JWT_SECRET_FILE:
    external: true
  AUTHELIA_SESSION_SECRET_FILE:
    external: true
  AUTHELIA_SESSION_REDIS_PASSWORD_FILE:
    external: true
  AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE:
    external: true
  #AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE:
  #  external: true
  AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE:
    external: true

########################### SERVICES
services:
# All services / apps go below this line!

# Traefik 2 - Reverse Proxy
  traefik:
    image: traefik:chevrotin # (v2.2.x)
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.udp.address=:1704/udp
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # When using Cloudflare and all your traffic is behind their proxy (orange cloud in the DNS records), the request's origin IP is replaced with Cloudflare's IP. 
      # The result is that all of your services will know that a Cloudflare IP has connected, but you can't see the actual origin IP. 
      # This line tells Traefik to trust forwarded headers information (X-Forwarded-*) for the publicly available Cloudflare IPs, 
      # which basically means that Traefik will accept the X-Forwarded-For header set by Cloudflare.
      # This option is not needed if you are not using Cloudflare's proxy features (DNS entries are grey-clouded).
      - --entryPoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.http.forwardedHeaders.insecure
      - --entryPoints.api.address=:8080
      - --api=true
      #- --api.insecure=true
      #- --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.DOMAINNAME.TLD`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik_public
      - --providers.docker.swarmMode=true
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      #- --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge=true
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.dns-cloudflare.acme.dnschallenge.delaybeforecheck=30 # Default: 0
      - --certificatesResolvers.dns-cloudflare.acme.email=USER@DOMAINNAME.TLD
      - --certificatesresolvers.dns-cloudflare.acme.keytype=RSA4096"
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json"
    deploy:
      # Global mode makes an instance listen on _every_ node, so that regardless of which
      # node the request arrives on, it'll be forwarded to the correct backend service!
      mode: global
      labels:
        traefik.enable: "true"
        # HTTP-to-HTTPS Redirect
        traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: "https"
        traefik.http.routers.http-catchall.entrypoints: "http"
        traefik.http.routers.http-catchall.middlewares: "redirect-to-https"
        traefik.http.routers.http-catchall.rule: "HostRegexp(`{host:.+}`)"
        # HTTP Routers
        traefik.http.routers.traefik-rtr.entrypoints: "https"
        traefik.http.routers.traefik-rtr.rule: "Host(`traefik.DOMAINNAME.TLD`, `traefik.DOMAINNAME2.TLD`)"
        ## HTTPS Services
        traefik.http.routers.traefik-rtr.tls: "true"
        traefik.http.routers.traefik-rtr.tls.certresolver: "dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs!
        # SSL Certificates
        traefik.http.routers.traefik-rtr.tls.domains[0].main: "DOMAINNAME.TLD"
        traefik.http.routers.traefik-rtr.tls.domains[0].sans: "*.DOMAINNAME.TLD"
        traefik.http.routers.traefik-rtr.tls.domains[1].main: "DOMAINNAME2.TLD"
        traefik.http.routers.traefik-rtr.tls.domains[1].sans: "*.DOMAINNAME2.TLD"
        ## Services - API
        traefik.http.routers.traefik-rtr.service: "api@internal"
        traefik.http.services.traefik.loadbalancer.server.port: "8080" # Required by Docker Swarm but not *actually* used
        ## Middleware Chains
        traefik.http.routers.traefik-rtr.middlewares: "chain-authelia@file" # Authelia
        #traefik.http.routers.traefik-rtr.middlewares: "chain-basic-auth@file" # .htpasswd Authentication
        #traefik.http.routers.traefik-rtr.middlewares: "chain-no-auth@file" # No Authentication
        #traefik.http.routers.traefik-rtr.middlewares: "chain-oauth@file" # Traefik-Forward-Auth
      placement:
        constraints: [node.role == manager] # Keep this service on a Manager Node!
      restart_policy:
        condition: any
    environment:
      # Cloudflare Information passed as Docker Secrets
      CF_API_EMAIL_FILE: "/run/secrets/CLOUDFLARE_API_EMAIL" # Cloudflare Email Address
      CF_API_KEY_FILE: "/run/secrets/CLOUDFLARE_API_KEY" # Cloudflare Global API Key
      PUID: "1000"
      PGID: "1000"
      TZ: "America/Los_Angeles"
    networks:
      internal:
      traefik_public:
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 1704
        published: 1704
        protocol: udp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    secrets:
      - CLOUDFLARE_API_EMAIL
      - CLOUDFLARE_API_KEY
    volumes:
      - type: bind
        source: "/etc/localtime"
        target: "/etc/localtime"
        read_only: true
      - type: bind
        source: "/var/run/docker.sock"
        target: "/var/run/docker.sock"
        read_only: true
      - type: bind
        source: "/rootfs/docker/traefik/traefik/_data/rules"
        target: "/rules"
        read_only: true
      - type: bind
        source: "/rootfs/docker/traefik/traefik/_data/logs/traefik.log"
        target: "/traefik.log"
      # Certificate Storage
      - type: bind
        source: "/rootfs/letsencrypt"
        target: "/rootfs/letsencrypt"
      # When stored in this location, `acme.json` file is converted to multiple certificate formats whenever it is updated (external script)
      - type: bind
        source: "/rootfs/letsencrypt/acme.json"
        target: "/acme.json"

# Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    image: "authelia/authelia:latest"
    deploy:
      # Global mode makes an instance listen on _every_ node, so that regardless of which
      # node the request arrives on, it'll be forwarded to the correct backend service!
      mode: global
      labels:
        traefik.enable: "true"
        traefik.docker.network: "traefik_public"
        ## HTTP Routers
        traefik.http.routers.authelia-rtr.entrypoints: "https"
        traefik.http.routers.authelia-rtr.rule: "Host(`authelia.DOMAINNAME.TLD`, `authelia.DOMAINNAME2.TLD`)"
        ## HTTP Services
        traefik.http.routers.authelia-rtr.service: "authelia-svc"
        traefik.http.services.authelia-svc.loadbalancer.server.port: "9091"
        ## HTTPS Services
        traefik.http.routers.authelia-rtr.tls: "true"
        traefik.http.routers.authelia-rtr.tls.certresolver: "dns-cloudflare"
        # SSL Certificates
        traefik.http.routers.authelia-rtr.tls.domains[0].main: "*.DOMAINNAME.TLD"
        traefik.http.routers.authelia-rtr.tls.domains[0].sans: "DOMAINNAME.TLD"
        traefik.http.routers.authelia-rtr.tls.domains[1].main: "*.DOMAINNAME2.TLD"
        traefik.http.routers.authelia-rtr.tls.domains[1].sans: "DOMAINNAME2.TLD"
        ## HSTS Header Middleware
        traefik.http.middlewares.authelia.headers.SSLRedirect: "true"
        traefik.http.middlewares.authelia.headers.STSSeconds: "315360000"
        traefik.http.middlewares.authelia.headers.browserXSSFilter: "true"
        traefik.http.middlewares.authelia.headers.contentTypeNosniff: "true"
        traefik.http.middlewares.authelia.headers.forceSTSHeader: "true"
        traefik.http.middlewares.authelia.headers.SSLHost: ""
        traefik.http.middlewares.authelia.headers.STSIncludeSubdomains: "true"
        traefik.http.middlewares.authelia.headers.STSPreload: "true"
        traefik.http.middlewares.authelia.headers.frameDeny: "true"
        ## Middleware Chains
        traefik.http.routers.authelia-rtr.middlewares: "chain-authelia@file" # Authelia
        #traefik.http.routers.authelia-rtr.middlewares: "chain-basic-auth@file" # .htpasswd Authentication
        #traefik.http.routers.authelia-rtr.middlewares: "chain-no-auth@file" # No Authentication
        #traefik.http.routers.authelia-rtr.middlewares: "chain-oauth@file" # Traefik-Forward-Auth
      restart_policy:
        condition: any
    environment:
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE: "/run/secrets/AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE"
      #AUTHELIA_DUO_API_SECRET_KEY_FILE: "/run/secrets/AUTHELIA_DUO_API_SECRET_KEY_FILE" # Uncomment and supply if you use Duo
      AUTHELIA_JWT_SECRET_FILE: "/run/secrets/AUTHELIA_JWT_SECRET_FILE"
      AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: "/run/secrets/AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE"
      AUTHELIA_SESSION_REDIS_PASSWORD_FILE: "/run/secrets/AUTHELIA_SESSION_REDIS_PASSWORD_FILE"
      AUTHELIA_SESSION_SECRET_FILE: "/run/secrets/AUTHELIA_SESSION_SECRET_FILE"
      AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: "/run/secrets/AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE"
    secrets:
      - AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE
      #- AUTHELIA_DUO_API_SECRET_KEY_FILE
      - AUTHELIA_JWT_SECRET_FILE
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
      - AUTHELIA_SESSION_REDIS_PASSWORD_FILE
      - AUTHELIA_SESSION_SECRET_FILE
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE
    networks:
      internal:
      traefik_public:
    ports:
      - target: 9091
        published: 9091
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: "/etc/localtime"
        target: "/etc/localtime"
        read_only: true
      - type: bind
        source: "/rootfs/docker/traefik/authelia/_data/etc/configuration.yml"
        target: "/etc/authelia/configuration.yml"
        read_only: true
      - type: bind
        source: "/rootfs/docker/traefik/authelia/_data/etc/users_database.yml"
        target: "/etc/authelia/users_database.yml"
      - type: bind
        source: "/rootfs/docker/traefik/authelia/_data/lib"
        target: "/var/lib/authelia"
      # For testing purposes, notifications can be sent in a file.
      - type: bind
        source: "/rootfs/docker/traefik/authelia/_data/notification.txt"
        target: "/tmp/authelia/notification.txt"

# Redis - Caching
  redis:
    image: "redis:alpine"
    command: "redis-server --requirepass ${AUTHELIA_SESSION_REDIS_PASSWORD_FILE}"
    deploy:
      # Global mode makes an instance listen on _every_ node, so that regardless of which
      # node the request arrives on, it'll be forwarded to the correct backend service!
      mode: global
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    environment:
      TZ: "America/Los_Angeles"
    networks:
      internal:
    ports:
      - target: 6379
        #published: 36379
        protocol: tcp
        #mode: host
    volumes:
      - type: bind
        source: "/etc/localtime"
        target: "/etc/localtime"
        read_only: true
      - type: bind
        source: "/rootfs/docker/traefik/redis/_data/data"
        target: "/data"
